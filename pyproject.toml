[build-system]
requires = ["setuptools >= 64.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
include = ["cirkit*"]

[project]
name = "cirkit"
version = "0.0.0"
description = ""
readme = "README.md"
requires-python = ">=3.8"
license = { text="GPLv3" }
keywords = []
authors = [
  { name="The APRIL Lab." }
]
classifiers = [
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
  "Operating System :: OS Independent",
]
dependencies = [
  "torch~=2.1.0",
  "numpy>=1.24.0",
]

[project.optional-dependencies]
lint = [
  "black~=23.0",
  "mypy==1.6.1",  # should be specific version for stable typing
  "pylint~=3.0.0",
  "pydocstyle[toml]~=6.3.0",
  "pytest",  # this is required to lint the test files
]
test = [
  "pytest",
  "pytest-cov",
]
notebooks = [
  "torchvision"
]

[project.urls]
"Homepage" = "https://github.com/april-tools/cirkit"

[tool.pytest.ini_options]
pythonpath = "."
testpaths = ["tests"]

[tool.coverage.report]
# regex for exclusion
exclude_also = [
  '@overload',
]

# Following are configs for code quality checks. Any change should be put into
# a separate PR and merge with care. Rules can only be modified after discussion.

# code style
[tool.black]
line-length = 100
target-version = ['py38']
required-version = 23

# import style
[tool.isort]
py_version = 38
profile = "black"
line_length = 100
extra_standard_library = [  # we treat these as stdlib
  "typing_extensions",
]

# doc style
[tool.pydocstyle]
convention = "google"
add_select = "D204,D400,D401,D404"
add_ignore = "D100,D104"

# general linting
[tool.pylint.main]
jobs = 0
py-version = "3.8"
evaluation = """
  10 - 10 * min(
    1, fatal + (5 * error + warning + refactor + convention + 0.1 * info) / statement
  )
"""  # take into account `info`
load-plugins = [  # as available in pylint/extensions
  "pylint.extensions.bad_builtin",
  "pylint.extensions.broad_try_clause",
  "pylint.extensions.check_elif",
  "pylint.extensions.code_style",
  "pylint.extensions.comparison_placement",
  "pylint.extensions.confusing_elif",
  "pylint.extensions.consider_refactoring_into_while_condition",
  "pylint.extensions.consider_ternary_expression",
  "pylint.extensions.dict_init_mutate",
  "pylint.extensions.docparams",
  "pylint.extensions.docstyle",
  "pylint.extensions.dunder",
  "pylint.extensions.empty_comment",
  "pylint.extensions.eq_without_hash",
  "pylint.extensions.for_any_all",
  # "pylint.extensions.magic_value",  # too strict
  "pylint.extensions.mccabe",
  "pylint.extensions.no_self_use",
  "pylint.extensions.overlapping_exceptions",
  "pylint.extensions.private_import",
  "pylint.extensions.redefined_loop_name",
  "pylint.extensions.redefined_variable_type",
  "pylint.extensions.set_membership",
  "pylint.extensions.typing",
  "pylint.extensions.while_used",
]
[tool.pylint."messages control"]
enable= [
  "use-implicit-booleaness-not-comparison-to-string",
  "use-implicit-booleaness-not-comparison-to-zero",
  "consider-using-augmented-assign",
  "prefer-typing-namedtuple",
  "bad-inline-option",
  "deprecated-pragma",
  "use-symbolic-message-instead",
  "useless-suppression",
]
disable = [
  "missing-module-docstring",
  "no-member",
  "fixme",
  "duplicate-code",
]
[tool.pylint.import]
allow-reexport-from-package = true
[tool.pylint.parameter_documentation]
accept-no-param-doc = false
accept-no-raise-doc = false
accept-no-return-doc = false
accept-no-yields-doc = false
default-docstring-type = "google"

# type checking
[tool.mypy]
python_version = 3.8
mypy_path = "3rd-party-stubs"
follow_imports = "silent"
follow_imports_for_stubs = true
# https://mypy.readthedocs.io/en/v1.6.1/command_line.html#config-file
warn_unused_configs = true
# https://mypy.readthedocs.io/en/stable/command_line.html#disallow-dynamic-typing
disallow_any_unimported = true
disallow_any_expr = true
disallow_any_decorated = true
disallow_any_explicit = true
disallow_any_generics = true
disallow_subclassing_any = true
# https://mypy.readthedocs.io/en/stable/command_line.html#untyped-definitions-and-calls
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
# https://mypy.readthedocs.io/en/stable/command_line.html#configuring-warnings
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true
# https://mypy.readthedocs.io/en/stable/command_line.html#miscellaneous-strictness-flags
implicit_reexport = false
strict_equality = true
extra_checks = true
enable_error_code = [
  "redundant-self",
  "redundant-expr",
  "possibly-undefined",
  "truthy-bool",
  "truthy-iterable",
  "ignore-without-code",
  # "explicit-override",  # can be useful, introduced in 3.12 and typing_extensions
]
